9
//sorting and limiting

//use sample_restaurents
// ascending order
db.neighborhoods.find({name: "Bedford"}).sort({name: 1});
//descending order
db.neighborhoods.find({name: "Bedford"}).sort({name: -1});
//to simplify for understanding, we can use projections
db.neighborhoods.find({name: "Bedford"}, {name: 1}).sort({name: 1});
db.neighborhoods.find({name: "Bedford"}, {name: -1}).sort({name: -1});

//limiting results to n
db.neighborhoods
  .find({name: "Bedford"}, {name: "Longwood"})
  .sort({name: -1})
  .limit(3);

//projections

/use sample_restaurents
//to find restaurants
db.restaurants.findOne({borough: "Brooklyn"});
//to project
db.restaurants.findOne({borough: "Brooklyn"}, {cuisine: 1, zipcode: 1});
//for neglecting id - exclusion
db.restaurants.findOne({borough: "Brooklyn"}, {cuisine: 0, zipcode: 0, _id: 0});
//exclusion
db.restaurants.findOne({borough: "Brooklyn"}, {cuisine: 1, zipcode: 1, _id: 0});

//switch to training_sample db to run these 
db.inspections.find(
    { sector: "Restaurant - 818" },
    { business_name: 1, result: 1, _id: 0 }
  )

db.inspections.find(
    { result: { $in: ["Pass", "Warning"] } },
    { date: 0, "address.zip": 0 }
)


8
//insertOne
db.books.insertOne({
  title: "Introduction to Machine Learning",
  ISBN: "978-3-16-148410-0",
  thumbnailUrl: "https://example.com/ml-thumbnail.jpg",
  publicationDate: ISODate("2022-05-15T00:00:00.000Z"),
  authors: ["John Doe", "Jane Smith"],
});

//replaceOne
db.books.replaceOne(
  {_id: ObjectId("65c3f41508ac0649ab5ae43b")}, // Replace document with this _id
  {
    _id: ObjectId("65c3f41508ac0649ab5ae43b"),
    title: "The Art of War",
    ISBN: "978-1590302255",
    thumbnailUrl: "https://example.com/art-of-war-thumbnail.jpg",
    publicationDate: ISODate("2020-01-01T00:00:00.000Z"),
    authors: ["Sun Tzu"],
  }
);

//deleteOne
db.birds.deleteOne({_id: ObjectId("65c3f32308ac0649ab5ae43a")});

//deleteMany
db.books.deleteMany({title:"Deep Dive into React Hooks"})
